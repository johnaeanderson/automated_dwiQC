m
#clean environment
rm(list = ls(all.names = TRUE))
#load libraries
libraries <- c('ggplot2', 'reshape2', 'tidyverse', 'ggrepel', 'kableExtra')
lapply(libraries, require, character.only = T) ; rm(libraries)
#bring in data
df <- read.csv(dir('../data/output', full.names=T, pattern="^df_dwiQC_PC"))
#clean environment
rm(list = ls(all.names = TRUE))
#load libraries
libraries <- c('ggplot2', 'reshape2', 'tidyverse', 'ggrepel', 'kableExtra')
lapply(libraries, require, character.only = T) ; rm(libraries)
#bring in data
df <- read.csv(dir('../data/output', full.names=T, pattern="^df_dwiQC_PC"))
#make a vector with metric names
metric_names <- c("Absolution motion",
"Relative motion",
"Percent outliers",
"Average SNR",
"Average CNR",
"Residual noise")
#make a vector with threshold values set by John
thresholdFail <- c('>= 2 (mm)',
'>= .5 (mm)',
'>= 2 (%)',
'<= 20',
'<= 1.5',
'>= 6')
#make a dataframe
threshold <- as.data.frame(rbind(metric_names, thresholdFail), row.names = F, header = F)
row.names(threshold) <- c('Metric', 'Suggested threshold')
colnames(threshold) <- NULL
#output in table
threshold %>%
kable(align='c') %>%
kable_styling()
#clean environment
rm(list = ls(all.names = TRUE))
#load libraries
libraries <- c('ggplot2', 'reshape2', 'tidyverse', 'ggrepel', 'kableExtra')
lapply(libraries, require, character.only = T) ; rm(libraries)
#bring in data
df <- read.csv(dir('../data/output', full.names=T, pattern="^df_dwiQC_PC"))
#make a vector with metric names
metric_names <- c("Absolution motion",
"Relative motion",
"Percent outliers",
"Average SNR",
"Average CNR",
"Residual noise")
#make a vector with threshold values set by John
thresholdFail <- c('>= 2 (mm)',
'>= .5 (mm)',
'>= 2 (%)',
'<= 20',
'<= 1.5',
'>= 6')
#make a dataframe
threshold <- as.data.frame(rbind(metric_names, thresholdFail), row.names = F, header = F)
row.names(threshold) <- c('Metric', 'Suggested threshold')
colnames(threshold) <- NULL
#output in table
threshold %>%
kable(align='c') %>%
kable_styling()
#write a function for plotting automated QC metrics
qcPlot_fn <- function(yvar, threshold, operator){
#fancy fanagling to use variable and operator in ggplot
yvar <- eval(substitute(yvar), df)
operator_fn <- match.fun(operator)
#feed data into ggplot
df %>% ggplot(aes(x=factor(0), y = get(yvar))) +
#add jittered points
geom_jitter(width=.5, alpha=.4, size=5, pch=21) +
#overlay violin plot
geom_violin(trim = FALSE, fill='lightgrey', color='black', alpha=.2, color = NA) +
#specify plot appearance
coord_flip() +
theme_classic() +
ylab('') +
xlab('') +
theme(legend.position='none',
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line=element_blank()) +
#add cut-off score line
geom_hline(yintercept = threshold, linetype = "dashed", color = "black") +
#add a label to outliers
geom_label_repel(data = subset(df, operator_fn(get(yvar), threshold)),
aes(label = record_id), segment.colour = 'black', nudge_x =.2)
}
qcPlot_fn('qc_mot_abs', 2, '>=')
names(df)
#feed data into ggplot
df %>% ggplot(aes(x=factor(0), y = get(yvar))) +
#add jittered points
geom_jitter(width=.5, alpha=.4, size=5, pch=21) +
#overlay violin plot
geom_violin(trim = FALSE, fill='lightgrey', color='black', alpha=.2, color = NA) +
#specify plot appearance
coord_flip() +
theme_classic() +
ylab('') +
xlab('') +
theme(legend.position='none',
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line=element_blank()) +
#add cut-off score line
geom_hline(yintercept = threshold, linetype = "dashed", color = "black") +
#add a label to outliers
geom_label_repel(data = subset(df, operator_fn(get(yvar), threshold)),
aes(label = subject_id), segment.colour = 'black', nudge_x =.2)
#write a function for plotting automated QC metrics
qcPlot_fn <- function(yvar, threshold, operator){
#fancy fanagling to use variable and operator in ggplot
yvar <- eval(substitute(yvar), df)
operator_fn <- match.fun(operator)
#feed data into ggplot
df %>% ggplot(aes(x=factor(0), y = get(yvar))) +
#add jittered points
geom_jitter(width=.5, alpha=.4, size=5, pch=21) +
#overlay violin plot
geom_violin(trim = FALSE, fill='lightgrey', color='black', alpha=.2, color = NA) +
#specify plot appearance
coord_flip() +
theme_classic() +
ylab('') +
xlab('') +
theme(legend.position='none',
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line=element_blank()) +
#add cut-off score line
geom_hline(yintercept = threshold, linetype = "dashed", color = "black") +
#add a label to outliers
geom_label_repel(data = subset(df, operator_fn(get(yvar), threshold)),
aes(label = subject_id), segment.colour = 'black', nudge_x =.2)
}
qcPlot_fn('qc_mot_abs', 2, '>=')
names(df)
#make columns to indicate PASS/FAIL on basis of working group recommendations
df$qc_eval_mot_abs <- ifelse(df$qc_mot_abs >= 2, 1, 0)
df$qc_eval_mot_rel <- ifelse(df$qc_mot_rel >= .5,  1, 0)
df$qc_eval_outliers_pe <- ifelse(df$qc_outliers_pe >= 2,  1, 0)
df$qc_eval_avg_snr <- ifelse(df$qc_snr <= 20,  1, 0)
df$qc_eval_avg_cnr <- ifelse(df$avg_cnr <= 1.5,  1, 0)
df$qc_eval_avg_snr <- ifelse(df$age_snr <= 20,  1, 0)
df$qc_eval_avg_snr <- ifelse(df$avg_snr <= 20,  1, 0)
df$qc_eval_avg_cnr <- ifelse(df$avg_cnr <= 1.5,  1, 0)
df$qc_eval_residual <- ifelse(df$residual >= 6,  1, 0)
#make global FAIL count
df$qc_score <- rowSums(df[, grep('eval', colnames(df))])
df
#identify participants with score of 2 or more -- these participants should be closely reviewed/ removed from later anlayses
exclude_qc <- paste('DWI_quality', df$subject_id[which(df$qc_score >= 2)])
#write out names for removal from future analyses
write(exclude_qc, file = "..data/output/excludeParticipants.txt",
ncolumns = 1,
append = TRUE, sep = " ")
#write out names for removal from future analyses
write(exclude_qc, file = "../data/output/excludeParticipants.txt",
ncolumns = 1,
append = TRUE, sep = " ")
#subset df to those who have a score of 2 or greater
df <- df[df$qc_score >= 2,]
#round values outside of the table
df <- df %>% mutate_if(is.numeric, round, digits=2)
#clean environment
rm(list = ls(all.names = TRUE))
#load libraries
libraries <- c('ggplot2', 'reshape2', 'tidyverse', 'ggrepel', 'kableExtra')
lapply(libraries, require, character.only = T) ; rm(libraries)
#bring in data
df <- read.csv(dir('../data/output', full.names=T, pattern="^df_dwiQC_PC"))
#make a vector with metric names
metric_names <- c("Absolution motion",
"Relative motion",
"Percent outliers",
"Average SNR",
"Average CNR",
"Residual noise")
#make a vector with threshold values set by John
thresholdFail <- c('>= 2 (mm)',
'>= .5 (mm)',
'>= 2 (%)',
'<= 20',
'<= 1.5',
'>= 6')
#make a dataframe
threshold <- as.data.frame(rbind(metric_names, thresholdFail), row.names = F, header = F)
row.names(threshold) <- c('Metric', 'Suggested threshold')
colnames(threshold) <- NULL
#output in table
threshold %>%
kable(align='c') %>%
kable_styling()
#write a function for plotting automated QC metrics
qcPlot_fn <- function(yvar, threshold, operator){
#fancy fanagling to use variable and operator in ggplot
yvar <- eval(substitute(yvar), df)
operator_fn <- match.fun(operator)
#feed data into ggplot
df %>% ggplot(aes(x=factor(0), y = get(yvar))) +
#add jittered points
geom_jitter(width=.5, alpha=.4, size=5, pch=21) +
#overlay violin plot
geom_violin(trim = FALSE, fill='lightgrey', color='black', alpha=.2, color = NA) +
#specify plot appearance
coord_flip() +
theme_classic() +
ylab('') +
xlab('') +
theme(legend.position='none',
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line=element_blank()) +
#add cut-off score line
geom_hline(yintercept = threshold, linetype = "dashed", color = "black") +
#add a label to outliers
geom_label_repel(data = subset(df, operator_fn(get(yvar), threshold)),
aes(label = subject_id), segment.colour = 'black', nudge_x =.2)
}
names(df)
